package router

import "fmt"

// Param описывает именованный параметр и его значение. В качестве ключа
// используется имя параметра (без символа параметра), а в качестве значения —
// строка из пути, соответствующая данной позиции.
//
// Я не стал использовать для параметров словарь, т.к. данный метод позволяет
// сохранить порядок следования и использовать параметры с одинаковым именем.
type Param struct {
	Key, Value string
}

// String возвращает строковое представление имени и значения параметра.
func (p *Param) String() string {
	return fmt.Sprintf("%v: %v", p.Key, p.Value)
}

// Params описывает список именованных параметров.
type Params []Param

// Get возвращает значение первого параметра в списке с указанным именем. Если
// такого параметра в списке нет, то возвращается пустая строка.
func (p Params) Get(name string) string {
	for _, param := range p {
		if param.Key == name {
			return param.Value
		}
	}
	return ""
}
